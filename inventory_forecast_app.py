# -*- coding: utf-8 -*-
"""Inventory_forecast_app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Mg3_WL8JwRZdjGOm2ZyXvxxRtXdQ2JHM
"""

# Commented out IPython magic to ensure Python compatibility.
# %%writefile streamlit_app.py
# import streamlit as st
# import pandas as pd
# import numpy as np
# from prophet import Prophet
# import matplotlib.pyplot as plt
# from io import BytesIO
# 
# def convert_df_to_csv(df):
#     return df.to_csv(index=False).encode('utf-8')
# 
# st.title('Demand Forecasting and Inventory Optimization with Prophet')
# 
# st.write("""
# ## Instructions
# 1. Prepare a CSV file with the following columns:
#    - **date**: The date of the record (e.g., YYYY-MM-DD).
#    - **sales**: The actual sales figures for each date.
#    - **inventory**: The inventory levels for each date.
# 2. Upload the CSV file using the file uploader below.
# 3. View the predictions and analysis.
# """)
# 
# uploaded_file = st.file_uploader("Choose a CSV file", type="csv")
# if uploaded_file is not None:
#     input_data = pd.read_csv(uploaded_file)
#     st.write("Uploaded Data:")
#     st.write(input_data.head())
#     required_columns = ['date', 'sales', 'inventory']
#     if all(column in input_data.columns for column in required_columns):
#         input_data['date'] = pd.to_datetime(input_data['date'])
#         prophet_data = input_data[['date', 'sales']].rename(columns={'date': 'ds', 'sales': 'y'})
#         model = Prophet()
#         model.fit(prophet_data)
#         st.write("## Forecast Future Demand")
#         forecast_period = st.selectbox("Select forecast period", ["3 months", "6 months", "1 year"])
#         if forecast_period == "3 months":
#             future_days = 90
#         elif forecast_period == "6 months":
#             future_days = 180
#         else:
#             future_days = 365
#         future_dates = model.make_future_dataframe(periods=future_days)
#         forecast = model.predict(future_dates)
#         forecast = forecast.rename(columns={
#             'ds': 'Date',
#             'yhat': 'Predicted Sales',
#             'yhat_lower': 'Prediction Interval Lower Bound',
#             'yhat_upper': 'Prediction Interval Upper Bound'
#         })
#         st.write("Future Predictions:")
#         st.write(forecast[['Date', 'Predicted Sales', 'Prediction Interval Lower Bound', 'Prediction Interval Upper Bound']].tail(future_days))
#         st.write("Visualization of Future Predictions:")
#         fig, ax = plt.subplots(figsize=(12, 6))
#         ax.plot(input_data['date'], input_data['sales'], label='Actual Sales', color='blue')
#         ax.plot(forecast['Date'], forecast['Predicted Sales'], label='Predicted Sales', color='orange')
#         ax.fill_between(forecast['Date'], forecast['Prediction Interval Lower Bound'], forecast['Prediction Interval Upper Bound'], color='orange', alpha=0.3)
#         ax.set_xlabel('Date')
#         ax.set_ylabel('Sales')
#         ax.set_title('Actual vs Predicted Sales with Prediction Intervals')
#         ax.legend()
#         ax.grid(True)
#         st.pyplot(fig)
#         st.write("## Download Predictions")
#         csv = convert_df_to_csv(forecast[['Date', 'Predicted Sales', 'Prediction Interval Lower Bound', 'Prediction Interval Upper Bound']])
#         st.download_button(
#             label="Download predictions as CSV",
#             data=csv,
#             file_name='forecast_predictions.csv',
#             mime='text/csv',
#         )
#     else:
#         st.write(f"Error: The uploaded file must contain the following columns: {', '.join(required_columns)}")